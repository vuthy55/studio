
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User Profiles: Users can manage their own profile. Admins can manage any.
    match /users/{userId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      allow read, update: if isOwner() || isAdmin();
      allow create: if isOwner();
    }

    // Sync Rooms: Handles creation, reading, and updates for rooms.
    match /syncRooms/{roomId} {
      // Authenticated users can create a room, ensuring they are the creator.
      allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;

      // Allow reads if the user's email is on the invite list.
      allow read: if request.auth != null && request.auth.token.email in resource.data.invitedEmails;

      // Allow updates (like changing speaker or closing room) if the user is an emcee.
      allow update: if request.auth != null && request.auth.uid in resource.data.emceeUids;

      // Allow creator to delete the room
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorUid;
    }

    // Participants sub-collection: Handles who can join and how.
    match /syncRooms/{roomId}/participants/{participantId} {
      // A function to check if the requesting user is on the room's invite list.
      function isInvited() {
        let room = get(/databases/$(database)/documents/syncRooms/$(roomId));
        // Check if room data exists before trying to access it
        return room != null && request.auth != null && request.auth.token.email in room.data.invitedEmails;
      }

      // A function to check if the user is an emcee for the room.
      function isEmcee() {
        let room = get(/databases/$(database)/documents/syncRooms/$(roomId));
        return room != null && request.auth != null && request.auth.uid in room.data.emceeUids;
      }
      
      // Allow reading/listing participants if the user is invited.
      allow list, read: if isInvited();
      
      // Allow creating a participant document (joining a room) if:
      // 1. The user is logged in, their email is on the invite list, and the document ID is their UID.
      // 2. A guest (not logged in) provides an email that is on the invite list.
      allow create: if (request.auth != null && isInvited() && request.resource.data.uid == request.auth.uid) ||
                       (request.auth == null && request.resource.data.email in get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails);
      
      // Allow emcees to update participants (e.g., mute, promote to emcee).
      allow update: if isEmcee();

      // Allow participants to remove themselves (leave room).
      allow delete: if request.auth != null && request.auth.uid == participantId;
    }
  }
}
