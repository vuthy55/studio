
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Users can read their own profile. Admins can read any profile.
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can only create their own profile document.
      allow create: if isOwner(userId);
      
      // Users can update their own profile. Admins can update any profile.
      allow update: if isOwner(userId) || isAdmin();
      
      // Users can delete their own profile (for account deletion). Admins can delete any.
      allow delete: if isOwner(userId) || isAdmin();

      // --- User Subcollections ---
      match /transactionLogs/{logId} {
        // Users can only read their own transaction history. Admins can read any.
        allow read: if isOwner(userId) || isAdmin();
        // Transactions are created by the server, not directly by the client.
        allow write: if false; 
      }
      
      match /paymentHistory/{paymentId} {
        // Users can only read their own payment history. Admins can read any.
        allow read: if isOwner(userId) || isAdmin();
         // Payment history is created by the server.
        allow write: if false;
      }
      
      match /practiceHistory/{phraseId} {
        // Users can read and write to their own practice history.
        allow read, write: if isOwner(userId);
      }

      match /savedPhrases/{phraseId} {
        // Users can read and write their own saved phrases.
        allow read, write: if isOwner(userId);
      }
    }

    // --- Rooms ---
    match /syncRooms/{roomId} {
        // Allow read if the user is on the invited list or an admin.
        allow read: if request.auth.uid in resource.data.invitedEmails || isAdmin();
        // Allow create if the user is authenticated (server action will verify cost).
        allow create: if isUserAuthenticated();
        // Allow update if the user is an emcee or an admin.
        allow update: if request.auth.email in resource.data.emceeEmails || isAdmin();
        // Only the creator or an admin can delete a room.
        allow delete: if isOwner(resource.data.creatorUid) || isAdmin();

        // --- Room Subcollections ---
        match /participants/{participantId} {
            // Read allowed if on the main room's invite list.
            allow read: if request.auth.uid in get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails || isAdmin();
            // Write allowed if they are the participant or an emcee.
            allow write: if isOwner(participantId) || request.auth.email in get(/databases/$(database)/documents/syncRooms/$(roomId)).data.emceeEmails;
            allow delete: if isOwner(participantId) || request.auth.email in get(/databases/$(database)/documents/syncRooms/$(roomId)).data.emceeEmails;
        }

        match /messages/{messageId} {
            // Read is the same as the parent room.
            allow read: if request.auth.uid in resource.data.invitedEmails || isAdmin();
            // Create is allowed if they are a participant in the subcollection.
            allow create: if exists(/databases/$(database)/documents/syncRooms/$(roomId)/participants/$(request.auth.uid));
        }
    }

    // --- General Collections ---
    match /feedback/{feedbackId} {
        // Only admins can read feedback.
        allow read: if isAdmin();
        // Any authenticated user can submit feedback.
        allow create: if isUserAuthenticated();
    }
    
    match /referrals/{referralId} {
        // Only the referrer or an admin can read a referral document.
        allow read: if isOwner(resource.data.referrerId) || isAdmin();
        // Referrals are created by the server.
        allow write: if false;
    }
    
     match /invitations/{invitationId} {
        // Only the inviter or an admin can read an invitation.
        allow read: if isOwner(resource.data.inviterId) || isAdmin();
        // Invitations are created by server actions.
        allow write: if false;
    }

    match /settings/{docId} {
        // All authenticated users can read settings.
        allow read: if isUserAuthenticated();
        // Only admins can write settings.
        allow write: if isAdmin();
    }
    
    // Allow admins to read the country intel cache.
    match /countryIntelCache/{countryId} {
        allow read: if isUserAuthenticated(); // All users need this for the InfoHub
        allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // --- Vibes (Common Room) ---
    match /vibes/{vibeId} {
      function isVibeMember() {
        return request.auth.uid in resource.data.invitedEmails || request.auth.email in resource.data.invitedEmails || resource.data.creatorEmail == request.auth.email;
      }
      
      function isVibeHost() {
        return request.auth.email in resource.data.hostEmails;
      }

      function isNotBlocked() {
        return !(request.auth.uid in resource.data.blockedUsers);
      }

      // Read is allowed if the vibe is public, or if the user is a member, and not blocked. Admins can read all.
      allow read: if (resource.data.isPublic || isVibeMember()) && isNotBlocked() || isAdmin();
      
      // Any authenticated user can create a vibe.
      allow create: if isUserAuthenticated();
      
      // Update allowed if user is a host and not blocked.
      allow update: if isVibeHost() && isNotBlocked() || isAdmin();
      
      // Delete allowed only for the original creator or an admin.
      allow delete: if isOwner(resource.data.creatorId) || isAdmin();
      
      match /posts/{postId} {
        // Read posts follows the same logic as reading the parent vibe.
        allow read: if (get(/databases/$(database)/documents/vibes/$(vibeId)).data.isPublic || request.auth.uid in get(/databases/$(database)/documents/vibes/$(vibeId)).data.invitedEmails) && !(request.auth.uid in get(/databases/$(database)/documents/vibes/$(vibeId)).data.blockedUsers) || isAdmin();
        // Create posts allowed if vibe is public or they are a member, and not blocked.
        allow create: if (get(/databases/$(database)/documents/vibes/$(vibeId)).data.isPublic || isVibeMember()) && isNotBlocked() || isAdmin();
        // Users can only delete their own posts. Hosts can delete any post.
        allow delete: if (isOwner(resource.data.authorId) || isVibeHost()) || isAdmin();
        // Only hosts can update posts (e.g., to add translations).
        allow update: if isVibeHost() || isAdmin();
      }
      
       match /parties/{partyId} {
        // Permissions for parties mirror the parent Vibe.
        allow read: if (get(/databases/$(database)/documents/vibes/$(vibeId)).data.isPublic || isVibeMember()) && isNotBlocked() || isAdmin();
        allow create, update: if isVibeHost() && isNotBlocked() || isAdmin();
        allow delete: if isVibeHost() || isAdmin();
      }
    }
  }
}
