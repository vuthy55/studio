
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read and update their own profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;

      // Users can read their own transaction history, but not create/delete them directly.
      match /transactionLogs/{logId} {
        allow read: if request.auth.uid == userId;
        allow create, update, delete: if false; // Only backend can write
      }

       // Users can read their own payment history.
      match /paymentHistory/{paymentId} {
        allow read: if request.auth.uid == userId;
        allow create, update, delete: if false; // Only backend can write
      }

      // Users can read and write to their own practice history.
      match /practiceHistory/{phraseId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Notifications can only be read by the user they are intended for.
    match /notifications/{notificationId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create, update, delete: if false; // Only backend can write
    }

    // Rules for Sync Rooms
    match /syncRooms/{roomId} {
      // Anyone authenticated can create a room.
      allow create: if request.auth != null;

      // Only an invited user can read a room's main document.
      allow read: if request.auth.uid != null && resource.data.invitedEmails.has(request.auth.token.email);

      // Only the creator or a designated emcee can update the room (e.g., invite others, change status).
      allow update: if request.auth.uid != null && (resource.data.creatorUid == request.auth.uid || resource.data.emceeEmails.has(request.auth.token.email));

      // Only the creator can delete a room.
      allow delete: if request.auth.uid != null && resource.data.creatorUid == request.auth.uid;

      // Rules for participants subcollection
      match /participants/{participantId} {
        // A user can only add/update their own participant document.
        allow write: if request.auth.uid == participantId;
        // Any invited user can read the participant list.
        allow read: if request.auth.uid != null && get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails.has(request.auth.token.email);
      }

      // Rules for messages subcollection
      match /messages/{messageId} {
        // Any participant can create a message.
        allow create: if request.auth.uid != null && exists(/databases/$(database)/documents/syncRooms/$(roomId)/participants/$(request.auth.uid));
        // Any participant can read messages.
        allow list, read: if request.auth.uid != null && exists(/databases/$(database)/documents/syncRooms/$(roomId)/participants/$(request.auth.uid));
      }
    }

    // Settings are read-only for clients, only backend can write.
    match /settings/appConfig {
      allow read: if true;
      allow write: if false; // Prevent client-side writes
    }
    
    // Financial ledger is inaccessible to clients.
    match /financialLedger/{ledgerId} {
      allow read, write: if false;
    }

    // Temporary PayPal orders are inaccessible to clients.
    match /paypalOrders/{orderId} {
      allow read, write: if false;
    }
    
    // Referrals are inaccessible to clients.
     match /referrals/{referralId} {
      allow read, write: if false;
    }
  }
}
