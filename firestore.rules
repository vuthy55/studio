
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user's ID matches the document's userId
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user has an 'admin' role in their own profile
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Users Collection Rules ---
    match /users/{userId} {
      // Admins can read/write any user document.
      // A regular user can only read/write their own document.
      allow read, write: if isAuthenticated() && (isAdmin() || isOwner(userId));

      // Rules for user subcollections
      match /{subcollection}/{docId} {
        // A user can only access their own subcollections. Admins can access any.
        allow read, write, list: if isAuthenticated() && (isAdmin() || isOwner(userId));
      }
    }
    
    // --- Settings Collection Rules ---
    match /settings/appConfig {
      // Any authenticated user can read settings (e.g., for token costs).
      allow get: if isAuthenticated();
      // Only admins can write/update settings.
      allow write: if isAuthenticated() && isAdmin();
    }
    
    // --- SyncRooms Collection Rules ---
    match /syncRooms/{roomId} {
      // Allow read/write if the user's email is in the invitedEmails array or if they are an admin.
      allow read, write: if isAuthenticated() && (isAdmin() || request.auth.token.email in resource.data.invitedEmails);
      
      // Rules for room subcollections (participants, messages)
      match /{subcollection}/{docId} {
         // Same logic as the parent room document.
         allow read, write, list: if isAuthenticated() && (isAdmin() || get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails.includes(request.auth.token.email));
      }
    }
  }
}
