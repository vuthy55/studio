
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Default: Deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, update, delete: if request.auth.uid == userId;
      // Users can create their own profile document
      allow create: if request.auth.uid == userId;
      // Admins can read/write any user's profile
      allow read, write: if request.auth.uid != null && isAdmin(request.auth.uid);
    }
    
    // User Subcollections (transactionLogs, paymentHistory, practiceHistory)
    match /users/{userId}/{subcollection}/{docId} {
        // Users can read/write their own subcollections
        allow read, write: if request.auth.uid == userId;
        // Admins can read any user's subcollections
        allow read: if request.auth.uid != null && isAdmin(request.auth.uid);
    }
    
    // Allow admins to list all users
    match /users/{userId} {
       allow list: if request.auth.uid != null && isAdmin(request.auth.uid);
    }
    
    // Settings collection
    match /settings/appConfig {
        // All authenticated users can read settings
        allow get: if request.auth.uid != null;
        // Only admins can write settings
        allow write: if request.auth.uid != null && isAdmin(request.auth.uid);
    }

    // Financial Ledger collection
    match /financialLedger/{docId} {
        // Only admins can read/write the financial ledger
        allow read, write: if request.auth.uid != null && isAdmin(request.auth.uid);
    }
    
    // PayPal temporary orders collection
    match /paypalOrders/{orderId} {
        // Only authenticated users can create their own temp order doc
        allow create: if request.auth.uid != null;
        // Only the server (via admin SDK) should be able to read/delete these.
        // We will leave this locked down as the server actions use the admin SDK.
        allow read, write: if false;
    }
    
    // Referrals collection
    match /referrals/{referralId} {
        // Any authenticated user can create a referral record
        allow create: if request.auth.uid != null;
    }
    
    // Sync Rooms
    match /syncRooms/{roomId} {
      // Allow read/write if the user's email is in the invited list
      allow read, write: if request.auth.uid != null && get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails.has(request.auth.token.email);
      // Allow create only if the creator is the current user
      allow create: if request.auth.uid != null && request.resource.data.creatorUid == request.auth.uid;
      // Allow delete only if the user is the creator
      allow delete: if request.auth.uid != null && get(/databases/$(database)/documents/syncRooms/$(roomId)).data.creatorUid == request.auth.uid;
    }

    match /syncRooms/{roomId}/{subcollection}/{docId} {
      // Allow participants to read/write to subcollections of rooms they are invited to
      allow read, write: if request.auth.uid != null && get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails.has(request.auth.token.email);
    }
  }
}
