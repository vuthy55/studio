rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User Profiles: Users can manage their own profile. Admins can manage any.
    match /users/{userId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      allow read, update: if isOwner() || isAdmin();
      allow create: if isOwner();
    }

    // Sync Rooms: Handles creation, reading, and updates for rooms.
    match /syncRooms/{roomId} {
       function isInvited() {
        return request.auth != null && request.auth.token.email in resource.data.invitedEmails;
      }
      function isEmcee() {
        return request.auth != null && request.auth.uid in resource.data.emceeUids;
      }
      function isOnlyChangingSpeaker() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['activeSpeakerUid']);
      }

      allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;
      allow read: if isInvited();
      allow update: if isEmcee() || (isInvited() && isOnlyChangingSpeaker());
      allow delete: if request.auth != null && resource.data.creatorUid == request.auth.uid;

      // --- Subcollection Rules ---

      // Participants sub-collection: Handles who can join and how.
      match /participants/{participantId} {
        function isCreator() {
          return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/syncRooms/$(roomId)).data.creatorUid;
        }
        function isSelf() {
          return request.auth != null && request.auth.uid == participantId;
        }

        allow list, read: if isInvited();
        allow create: if isSelf() && isInvited();
        allow update: if isEmcee() || isSelf();
        
        // Allow a user to leave the room (delete self) OR allow the creator to delete any participant doc (during room deletion).
        allow delete: if isSelf() || isCreator();
      }
    
      // Messages sub-collection: Handles sending and receiving messages in a room.
      match /messages/{messageId} {
          function isCreator() {
            return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/syncRooms/$(roomId)).data.creatorUid;
          }

          allow list, read: if isInvited();
          allow create: if isInvited() && request.resource.data.speakerUid == request.auth.uid;
          
          // Allow the room creator to delete messages (during room deletion).
          allow delete: if isCreator();
      }
    }
  }
}
