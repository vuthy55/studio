rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'admin';
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Allow users to create their own doc on signup
      allow create: if isOwner(userId);
      // Admins can update any field. Users can only update their own non-critical fields.
      allow update: if isAdmin() || 
        (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'country', 'mobile']));
      allow delete: if false;

      // Transaction logs are append-only for the user, but readable by admin.
      match /transactionLogs/{logId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
      
      // Practice history can be read and written by the user, and read by admins.
      match /practiceHistory/{phraseId} {
         allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Sync Rooms
    match /syncRooms/{roomId} {
        // Allow read/write if user's email is in the invitedEmails array
        allow read, update, delete: if request.auth.token.email in resource.data.invitedEmails || get(/databases/$(database)/documents/syncRooms/$(roomId)).data.creatorUid == request.auth.uid;
        // Allow create if user is authenticated
        allow create: if request.auth != null;

        // Subcollections
        match /participants/{participantId} {
             // Allow read if user's email is in the room's invitedEmails array
            allow read: if get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails.hasAny([request.auth.token.email]);
            // Allow write if the participantId matches the user's uid
            allow write: if request.auth.uid == participantId;
            // Allow delete if the participantId matches the user's uid
            allow delete: if request.auth.uid == participantId;
        }

        match /messages/{messageId} {
            // Allow read if user's email is in the room's invitedEmails array
            allow read: if get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails.hasAny([request.auth.token.email]);
            // Allow write if the user is a participant
            allow create: if exists(/databases/$(database)/documents/syncRooms/$(roomId)/participants/$(request.auth.uid));
            allow update, delete: if false;
        }
    }
  }
}
