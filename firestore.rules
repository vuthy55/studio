rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User Profiles
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update: if request.auth != null && request.auth.uid == userId;
    }

    // Sync Rooms
    match /syncRooms/{roomId} {
      // Authenticated users can create a room, ensuring they are the creator.
      allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;

      // Allow reads if the user's email is on the invite list.
      allow read: if request.auth != null && request.auth.token.email in resource.data.invitedEmails;

      // Allow updates (like changing speaker) if the user is an emcee.
      allow update: if request.auth != null && request.auth.uid in resource.data.emceeUids;
    }

    // Participants sub-collection
    match /syncRooms/{roomId}/participants/{participantId} {
      // Anyone can read the participant list for a room they can access.
      function canReadRoom() {
        return exists(/databases/$(database)/documents/syncRooms/$(roomId)) &&
               request.auth != null &&
               request.auth.token.email in get(/databases/$(database)/documents/syncRooms/$(roomId)).data.invitedEmails;
      }

      allow list: if canReadRoom();
      allow read: if canReadRoom();
      
      // Allow a user on the invite list to add themselves as a participant.
      allow create: if canReadRoom() && 
                       (request.resource.data.uid == request.auth.uid || 
                        request.resource.data.email == request.auth.token.email);
      
      // Allow emcees to update participants (mute, etc.).
      function isEmcee() {
          return exists(/databases/$(database)/documents/syncRooms/$(roomId)) &&
                 request.auth != null &&
                 request.auth.uid in get(/databases/$(database)/documents/syncRooms/$(roomId)).data.emceeUids;
      }
      allow update: if isEmcee();

      // Allow participants to remove themselves (leave room).
      allow delete: if request.auth != null && request.auth.uid == participantId;
    }
  }
}
